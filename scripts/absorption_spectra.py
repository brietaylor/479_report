#
#
# Module for plotting absorption feature of various Rb87/85 transitions and
# comparing error signals generated by phase-modulated sideband separation
#
# Author:
#   Steve Novakov - Sept 2014
#

import scipy.constants as scicon
import math
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rc
from scipy.integrate import quad

def MaxwellBoltzmannOnedir(v, alpha):
  return math.e**(-1 * v**2 / (2 * alpha**2))
# remember to multiply by (2/scicon.pi)**0.5 / alpha**3

def LorentzAbsorb(dnu, nu0, vel, gamma):
  return 1 / ((dnu - nu0*vel/scicon.c)**2 + gamma**2/4.0)
# remember to multiply by gamma/(2*scicon.pi)

def IntegrandNoPump(vel, dnu, nu0, alpha, gamma):
  return LorentzAbsorb(dnu, nu0, vel, gamma)*MaxwellBoltzmannOnedir(vel, alpha)

def IntegrandWithPump(vel, dnu, nu0, alpha, gamma, s):
  return LorentzAbsorb(dnu, nu0, vel, gamma) * \
    MaxwellBoltzmannOnedir(vel, alpha) * OneTransition(dnu, nu0, vel, gamma, s)

def OneTransition(dnu, nu0, vel, gamma, s):
    delta = dnu + nu0*vel/scicon.c
    p2 = (s / 2.0) / (1 + s + 4*delta**2/gamma**2)
    return 1 - 2*p2

rc('text', usetex=True)

dnu = 0.2 # GHz
N = 1000
nuspace = np.linspace(-1*dnu, dnu, N)

rb_nu0_D1 = 377107.463380 # GHz
rb_gamma_D1 = 0.0057500 # GHz
rb_nu0_D2 = 384230.484468 # GHz
rb_gamma_D2 = 0.0060666 # GHz

rb_isat = 2e-3 * 10000.0 # W/m**2

mass_rb87 = 86.909180520 * scicon.physical_constants["atomic mass unit-kilogram relationship"][0] # KG

T = 295.0 # Kelvin
alpha = (scicon.k * T / mass_rb87)**0.5
mean_velocity = 2 * alpha * (2/scicon.pi)**0.5
vmax = 10 * mean_velocity

print str(vmax) + "(m/s)?"

cell_length = 0.1 #meters

#NV = 1000
#vspace = np.linspace(0, vmax, NV)

absorption_response = []

constant_maxwell = 1/(alpha * (2 * scicon.pi)**0.5)
constant_lorentz = rb_gamma_D1/(2*scicon.pi)

#normfac = quad(IntegrandNoPump, -1*vmax, vmax, args=(rb_nu0_D1, rb_nu0_D1, alpha,
  #rb_gamma_D1))[0] * rb_nu0_D1  * constant_maxwell * constant_lorentz / scicon.c
normfac = 1.0
integral = 0

isatspace = [0.1, 0.5, 1.0, 5.0, 10.0]

ntot = len(nuspace)

for i in isatspace:

  absorption_response = []
  counter = 0
  counter2 = 1

  for n in nuspace:
    integral = quad(IntegrandWithPump, -1*vmax, vmax, args=(n, rb_nu0_D1, alpha,
      rb_gamma_D1, i))[0]

    optical_depth = normfac*integral*constant_maxwell*constant_lorentz

    #absorption_response.append(math.e**(-1*integral*constant_factor))
    absorption_response.append(math.e**(-1*cell_length*optical_depth))

    counter += 1
    percent = counter/float(ntot)

    if percent > counter2*0.1:
      counter2 += 1
      print str(percent) + "completed"



  plt.plot(nuspace, absorption_response, linewidth=3, label =
    "I/Isat = " + str(i))

  print str(i) + "  plotted"

plt.legend(loc = "upper right")
plt.title("Doppler Broadened Absorption Feature for Rb87 D1 Transition - " +
  str(cell_length) + " m Vapour Cell", y=1.05)
plt.ylabel(r"Transmission Ratio : $ e^{- \tau(\nu) \cdot L} $")
plt.xlabel(r"$ \nu - \nu_0 $ (GHz)")
plt.grid('on')

plt.show()